; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %cheri_opt -sroa -S %s -o - | FileCheck %s

%struct.e = type { %union.a }
%union.a = type { double }

; Function Attrs: noinline nounwind
define void @f() {
; CHECK-LABEL: @f(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[G_SROA_0:%.*]] = alloca double
; CHECK-NEXT:    [[G_SROA_0_0_G_SROA_0_0_:%.*]] = load double, double* [[G_SROA_0]]
; CHECK-NEXT:    call void @dostuff_double(double [[G_SROA_0_0_G_SROA_0_0_]])
; CHECK-NEXT:    [[G_SROA_0_0_C_SROA_CAST2:%.*]] = bitcast double* [[G_SROA_0]] to i8**
; CHECK-NEXT:    [[G_SROA_0_0_G_SROA_0_0_1:%.*]] = load i8*, i8** [[G_SROA_0_0_C_SROA_CAST2]]
; CHECK-NEXT:    call void @dostuff_charptr(i8* [[G_SROA_0_0_G_SROA_0_0_1]])
; CHECK-NEXT:    ret void
;
entry:
  %g = alloca %struct.e, align 8
  %d = getelementptr inbounds %struct.e, %struct.e* %g, i32 0, i32 0
  %b = bitcast %union.a* %d to double*
  %0 = load double, double* %b, align 8
  call void @dostuff_double(double %0)
  %d1 = getelementptr inbounds %struct.e, %struct.e* %g, i32 0, i32 0
  %c = bitcast %union.a* %d1 to i8**
  %1 = load i8*, i8** %c, align 8
  call void @dostuff_charptr(i8* %1)
  ret void
}

declare void @dostuff_double(double)

declare void @dostuff_charptr(i8*)
