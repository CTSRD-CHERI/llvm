; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; After the C13 == NULL optimization openssl/crypto/bn/bn_x931p.c
; RUN: %cheri_purecap_llc -verify-machineinstrs -o - %s -cheri-cap-table-abi=legacy | %cheri_FileCheck %s -check-prefix LEGACY
; RUN: %cheri_purecap_llc -verify-machineinstrs -o - %s -cheri-cap-table-abi=pcrel | %cheri_FileCheck %s -check-prefix PCREL
; ERR:  Bad machine code: Using an undefined physical register

; Calling a function with 9+ capability parameters would previously cause verification errors
define i32 @a(i64 addrspace(200) *, i32 addrspace(200) *, i32 addrspace(200) *,
; LEGACY-LABEL: a:
; LEGACY:       # %bb.0:
; LEGACY-NEXT:    cincoffset $c11, $c11, -[[@EXPR 2*$CAP_SIZE]]
; LEGACY-NEXT:    .cfi_def_cfa_offset [[@EXPR 2*$CAP_SIZE]]
; LEGACY-NEXT:    csd $gp, $zero, [[@EXPR 2*$CAP_SIZE -8]]($c11) # 8-byte Folded Spill
; LEGACY-NEXT:    csc $c17, $zero, 0($c11)
; LEGACY-NEXT:    .cfi_offset 28, -8
; LEGACY-NEXT:    .cfi_offset 89, -[[@EXPR 2*$CAP_SIZE]]
; LEGACY-NEXT:    cgetoffset $25, $c12
; LEGACY-NEXT:    lui $1, %hi(%neg(%gp_rel(a)))
; LEGACY-NEXT:    daddu $1, $1, $25
; LEGACY-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(a)))
; LEGACY-NEXT:    ld $1, %call16(b)($gp)
; LEGACY-NEXT:    cgetpccsetoffset $c12, $1
; LEGACY-NEXT:    cjalr $c12, $c17
; LEGACY-NEXT:    cgetnull $c13
; LEGACY-NEXT:    cgetnull $c13
; LEGACY-NEXT:    clc $c17, $zero, 0($c11)
; LEGACY-NEXT:    cld $gp, $zero, [[@EXPR 2 * $CAP_SIZE - 8]]($c11) # 8-byte Folded Reload
; LEGACY-NEXT:    cjr $c17
; LEGACY-NEXT:    cincoffset $c11, $c11, [[@EXPR 2* $CAP_SIZE]]
; PCREL-LABEL: a:
; PCREL:       # %bb.0:
; PCREL-NEXT:    cincoffset $c11, $c11, -[[$CAP_SIZE]]
; PCREL-NEXT:    .cfi_def_cfa_offset [[$CAP_SIZE]]
; PCREL-NEXT:    csc $c17, $zero, 0($c11)
; PCREL-NEXT:    .cfi_offset 89, -[[$CAP_SIZE]]
; PCREL-NEXT:    lui $1, %hi(%neg(%captab_rel(a)))
; PCREL-NEXT:    daddiu $1, $1, %lo(%neg(%captab_rel(a)))
; PCREL-NEXT:    cincoffset $c26, $c12, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(b)($c26)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    cgetnull $c13
; PCREL-NEXT:    cgetnull $c13
; PCREL-NEXT:    clc $c17, $zero, 0($c11)
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    cincoffset $c11, $c11, [[$CAP_SIZE]] 
              i64 addrspace(200) *, i64 addrspace(200) *, i64 addrspace(200) *,
              i32 addrspace(200) *, i32 addrspace(200) *, i32 addrspace(200) *) {
  %ret = call i32 @b()
  ret i32 %ret
}

declare i32 @b()
