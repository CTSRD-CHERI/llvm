// Some basic checks for the FileCheck expression evaluator

// RUN: echo "NOP" | not FileCheck -check-prefix=EMPTY1 %s 2>&1 | FileCheck -check-prefix EMPTY1-MSG %s
// EMPTY1: [[@EXPR]]
// EMPTY1-MSG: expressions.test:[[@LINE-1]]:19: error: Unexpected end of expression

// RUN: echo "NOP" | not FileCheck -check-prefix=EMPTY2 %s 2>&1 | FileCheck -check-prefix EMPTY2-MSG %s
// EMPTY2: [[@EXPR  ]]
// EMPTY2-MSG: expressions.test:[[@LINE-1]]:20: error: Unexpected end of expression

// simple mathematical expressions:
// NOTE: These are evaluated left to right and don't handle * or / specially!

// RUN: echo "2" | FileCheck -check-prefix=SIMPLE-MATH %s
// SIMPLE-MATH: [[@EXPR 1 + 1]]

// RUN: echo "14" | FileCheck -check-prefix=PAREN-MATH %s
// PAREN-MATH: [[@EXPR 2 * (3 + 6 - 2)]]

// RUN: echo "NOP" | not FileCheck -check-prefix=UNCLOSED-PAREN %s 2>&1 | FileCheck -check-prefix UNCLOSED-PAREN-MSG %s
// UNCLOSED-PAREN: [[@EXPR  2 * (3 + 6 - 2]]
// UNCLOSED-PAREN-MSG: expressions.test:[[@LINE-1]]:42: error: Expected ')' but got '<EOF>' instead
// UNCLOSED-PAREN-MSG: note: uses incorrect expression "@EXPR 2 * (3 + 6 - 2"


// Tests for the builtin functions:

// RUN: echo "2A" | FileCheck -check-prefix=HEX %s
// HEX: [[@EXPR hex(42)]]
// RUN: echo "42" | FileCheck -check-prefix=DEC %s
// DEC: [[@EXPR dec(0x2a)]]
// RUN: echo "52" | FileCheck -check-prefix=OCT %s
// OCT: [[@EXPR oct(42)]]
// RUN: echo "101010" | FileCheck -check-prefix=BIN %s
// BIN: [[@EXPR bin(42)]]
// RUN: echo "0x12345" | FileCheck -check-prefix=HEX-EXPR %s
// HEX-EXPR: [[@EXPR hex(0x1 << 16 + 0x2345)]]

// RUN: echo "HELLO 0xabcdef hello" | FileCheck -check-prefix=LOWER %s
// LOWER: [[WORD:[a-zA-Z]+]]
// LOWER: 0x[[@EXPR tolower(hex(11259375))]]
// LOWER: [[@EXPR tolower(WORD)]]
// RUN: echo "hello 0xABCDEF HELLO" | FileCheck -check-prefix=UPPER %s
// UPPER: [[WORD:[a-zA-Z]+]]
// UPPER: 0x[[@EXPR toupper(hex(11259375))]]
// UPPER: [[@EXPR toupper(WORD)]]

// RUN: echo "NOP" | not FileCheck -check-prefix=UNCLOSED-PAREN-BIN %s 2>&1 | FileCheck -check-prefix UNCLOSED-PAREN-BIN-MSG %s
// UNCLOSED-PAREN-BIN: [[@EXPR bin(42]]
// UNCLOSED-PAREN-BIN-MSG: expressions.test:[[@LINE-1]]:38: error: Expected ')' but got '<EOF>' instead
// UNCLOSED-PAREN-BIN-MSG: note: uses incorrect expression "@EXPR bin(42"


// Test variable captures:

// RUN: echo "22 -> 23" | FileCheck -check-prefix=VAR %s
// VAR: [[FOO:[0-9]+]]
// VAR: [[@EXPR FOO + 1]]

// RUN: echo "22 -> 23" | not FileCheck -check-prefix=VAR-WRONG-EXPR %s 2>&1 | FileCheck -check-prefix VAR-WRONG-EXPR-MSG %s
// VAR-WRONG-EXPR: [[FOO:[0-9]+]]
// VAR-WRONG-EXPR: [[@EXPR FOO + 2]]
// VAR-WRONG-EXPR-MSG: expressions.test:[[@LINE-1]]:20: error: expected string not found in input
// VAR-WRONG-EXPR-MSG: note: with expression "@EXPR FOO + 2" equal to "24"

// RUN: echo "22 -> 23" | not FileCheck -check-prefix=VAR-RESERVED-NAME %s 2>&1 | FileCheck -check-prefix VAR-RESERVED-NAME-MSG %s
// VAR-RESERVED-NAME: [[hex:[0-9]+]]
// VAR-RESERVED-NAME: [[@EXPR hex + 1]]
// VAR-RESERVED-NAME-MSG: expressions.test:[[@LINE-1]]:35: error: Expected '(' but got '+' instead
// VAR-RESERVED-NAME-MSG: note: uses incorrect expression "@EXPR hex + 1"

// RUN: echo "22 -> 23 -> 24" | FileCheck -check-prefix=VAR-RESERVED-NAME-ESCAPED %s
// VAR-RESERVED-NAME-ESCAPED: [[hex:[0-9]+]]
// VAR-RESERVED-NAME-ESCAPED: [[@EXPR $hex + 1]]
// VAR-RESERVED-NAME-ESCAPED: [[@EXPR ${hex} + 2]]

// Check variable captures
// RUN: echo "NOP" | not FileCheck -check-prefix=UNKNOWN-VAR %s 2>&1 | FileCheck -check-prefix UNKNOWN-VAR-MSG %s
// UNKNOWN-VAR: [[@EXPR FOO + 1]]
// UNKNOWN-VAR-MSG: expressions.test:[[@LINE-1]]:25: error: Undefined variable FOO
// UNKNOWN-VAR-MSG: note: uses incorrect expression "@EXPR FOO + 1"
